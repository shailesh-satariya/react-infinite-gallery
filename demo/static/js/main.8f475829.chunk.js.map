{"version":3,"sources":["contexts/photos-context.tsx","services/like-service.ts","services/photos-service.ts","utils/url.ts","config/index.ts","custom-hooks/use-intersection-observer.ts","components/infinite-scroll.tsx","components/gallery-image.tsx","components/loader.tsx","pages/gallery.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["APPEND_PHOTOS","SET_PHOTOS","initPhotos","photosContext","React","createContext","usePhotos","context","useContext","Error","PhotosProvider","props","useReducer","state","action","type","payload","photos","setPhotos","value","useMemo","Provider","LS_KEY","LIKED_PHOTOS","JSON","parse","localStorage","getItem","fetchPhotos","page","limit","url","params","urlObj","URL","key","searchParams","append","toString","href","e","insertParamsToUrl","process","Promise","reject","fetch","CONFIG","PAGE_SIZE","useIntersectionObserver","ref","options","forward","useState","element","setElement","isIntersecting","setIsIntersecting","observer","useRef","cleanOb","current","disconnect","useEffect","IntersectionObserver","isElementIntersecting","observe","InfiniteScroll","children","hasMore","loadMore","loader","attributes","loading","setLoading","lastElementRef","isBottomVisible","threshold","data-test","style","height","marginTop","GalleryImage","photo","isVisible","indexOf","id","isPhotoLiked","isLiked","setIsLiked","showImage","setShowImage","className","src","alt","author","onClick","index","splice","push","setItem","stringify","likePhoto","Loader","Gallery","setPage","length","setHasMore","a","response","json","newPhotos","toast","error","position","loadMoreFn","useCallback","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f475829.chunk.js","sourcesContent":["import React, {Dispatch, ProviderProps, SetStateAction} from \"react\";\r\nimport {PhotoItem} from \"../types\";\r\n\r\nexport const APPEND_PHOTOS = \"APPEND_PHOTOS\";\r\nexport const SET_PHOTOS = \"SET_PHOTOS\";\r\n\r\ntype PhotoActionTypes = {\r\n    type: undefined | null;\r\n} | {\r\n    type: typeof SET_PHOTOS | typeof APPEND_PHOTOS;\r\n    payload: PhotoItem[]\r\n}\r\n\r\nlet initPhotos: PhotoItem[] = [];\r\nconst photosContext = React.createContext(null);\r\n\r\nexport const setInitPhotos = (photos: PhotoItem[]): void => {\r\n    initPhotos = photos;\r\n};\r\n\r\n/**\r\n * @function usePhotos\r\n * @returns {Array} photosContext value, which is a state of [value, setter].\r\n *\r\n */\r\nexport const usePhotos: () => [PhotoItem[], Dispatch<SetStateAction<PhotoActionTypes>>] =\r\n    () => {\r\n        // useContext is a hook that returns the context value\r\n        // In this case, the context value is an [value, setter] array for the context state\r\n        // useContext also subscribes to changes, and will update any time the context value updates\r\n        //     we've memoized this so that it will only update when the photos value updates\r\n        const context = React.useContext(photosContext);\r\n\r\n        // throw an error if the context doesn't exist -- means we aren't in a provider\r\n        if (!context) {\r\n            throw new Error(\"usePhotos must be used within a PhotosProvider\");\r\n        }\r\n\r\n        // otherwise return the context\r\n        return context as any as [PhotoItem[], Dispatch<SetStateAction<PhotoActionTypes>>];\r\n    };\r\n\r\n/**\r\n * @function PhotosProvider\r\n * @param {object} props - props to pass through from declared component\r\n * @returns {JSX.Element} Provider component\r\n */\r\nexport const PhotosProvider = (props: Partial<ProviderProps<any>>) => {\r\n    const reducer = (state: PhotoItem[], action: PhotoActionTypes) => {\r\n        switch (action.type) {\r\n            case SET_PHOTOS:\r\n                return action.payload;\r\n            case APPEND_PHOTOS:\r\n                return [...state, ...action.payload];\r\n            default:\r\n                throw state;\r\n        }\r\n    };\r\n\r\n    // create state that will be used within the provider\r\n    // initial state value is initPhotos\r\n    const [photos, setPhotos] = React.useReducer(reducer, initPhotos);\r\n\r\n    // value for the context provider will be array of [value, setter] for photos state\r\n    // useMemo just ensures that the provider value will only update when photos updates\r\n    // No need to test this -- React tests useMemo for us!\r\n    const value = React.useMemo(() => [photos, setPhotos], [photos, setPhotos]);\r\n\r\n    // Return a Provider component with the [value, setter] array as the value, passing through the props\r\n    return <photosContext.Provider value={value} {...props} />;\r\n};\r\n\r\nconst contextExport = {SET_PHOTOS, APPEND_PHOTOS, PhotosProvider, usePhotos};\r\n\r\nexport default contextExport;","import {PhotoItem} from \"../types\";\r\n\r\nconst LS_KEY = \"liked-photos\";\r\nconst LIKED_PHOTOS: number[] = JSON.parse(localStorage.getItem(LS_KEY) || \"[]\");\r\n\r\n/**\r\n * likes/unlikes the photo\r\n *\r\n * @param {PhotoItem} photo\r\n */\r\nexport const likePhoto = (photo: PhotoItem): void => {\r\n    const index: number = LIKED_PHOTOS.indexOf(photo.id);\r\n    if (index > -1) {\r\n        LIKED_PHOTOS.splice(index, 1);\r\n    } else {\r\n        LIKED_PHOTOS.push(photo.id);\r\n    }\r\n\r\n    localStorage.setItem(LS_KEY, JSON.stringify(LIKED_PHOTOS));\r\n};\r\n\r\n/**\r\n * checks whether photo is liked or not\r\n *\r\n * @param {PhotoItem} photo\r\n *\r\n * @return {boolean}\r\n */\r\nexport const isPhotoLiked = (photo: PhotoItem): boolean => {\r\n    return LIKED_PHOTOS.indexOf(photo.id) > -1;\r\n};\r\n\r\n","import {insertParamsToUrl} from \"../utils\";\r\n\r\nconst API_URL: string = process.env.REACT_APP_API_URL as string;\r\n\r\n/**\r\n * fetches photos objects\r\n *\r\n * @param page\r\n * @param limit\r\n *\r\n * @return {Promise<any>}\r\n */\r\nexport const fetchPhotos: (page: number, limit: number) => Promise<any>\r\n    = (page: number, limit: number): Promise<any> => {\r\n    const url: string | false = insertParamsToUrl(API_URL, {page, limit});\r\n\r\n    if (url === false) {\r\n        return Promise.reject(\"Invalid url!\");\r\n    }\r\n\r\n    return fetch(url);\r\n};","/**\r\n * Inserts parameters to given url\r\n * @param url\r\n * @param params\r\n *\r\n * @return string | false\r\n */\r\nexport const insertParamsToUrl: ( url: string, params: Record<string, string | number> ) => string | false =\r\n    ( url: string, params: Record<string, string | number> ): string | false => {\r\n    try {\r\n        const urlObj: URL = new URL(url);\r\n\r\n        for( const key in params ) {\r\n            urlObj.searchParams.append( key, params[key].toString() );\r\n        }\r\n\r\n        return urlObj.href;\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n};","const CONFIG: Record<string, string|number> = {\r\n  PAGE_SIZE: 30\r\n};\r\n\r\nexport default CONFIG;","import React, {MutableRefObject} from \"react\";\r\n\r\n/**\r\n * useIntersectionObserver\r\n *\r\n * @param {MutableRefObject<Element | null>} ref\r\n * @param {IntersectionObserverInit} options\r\n * @param {boolean} forward\r\n *\r\n * @return {boolean}\r\n */\r\nexport const useIntersectionObserver: (ref: MutableRefObject<Element | null>, options?: IntersectionObserverInit, forward?: boolean) => boolean\r\n    = (ref: MutableRefObject<Element | null>, options: IntersectionObserverInit = {}, forward: boolean = true): boolean => {\r\n    const [element, setElement] = React.useState<Element | null>(null);\r\n    const [isIntersecting, setIsIntersecting] = React.useState(false);\r\n    const observer = React.useRef<null | IntersectionObserver>(null);\r\n\r\n    // Function remove previously connected observer\r\n    const cleanOb = () => {\r\n        if (observer.current) {\r\n            observer.current.disconnect();\r\n        }\r\n    };\r\n\r\n    // Check if element has been changed\r\n    React.useEffect(() => {\r\n        setElement(ref.current);\r\n    }, [ref]);\r\n\r\n    React.useEffect(() => {\r\n        if (!element) return;\r\n        // Clean previous observer\r\n        cleanOb();\r\n        const ob = (observer.current = new IntersectionObserver(\r\n            ([entry]) => {\r\n                const isElementIntersecting = entry.isIntersecting;\r\n                if (!forward) {\r\n                    setIsIntersecting(isElementIntersecting);\r\n                } else if (forward && !isIntersecting && isElementIntersecting) {\r\n                    setIsIntersecting(isElementIntersecting);\r\n                    // Remove the observe on success\r\n                    cleanOb();\r\n                }\r\n            },\r\n            {...options}\r\n        ));\r\n        ob.observe(element);\r\n        return () => {\r\n            cleanOb();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [element, options]);\r\n\r\n    return isIntersecting;\r\n};\r\n","import React, {ReactNode} from \"react\";\r\nimport {useIntersectionObserver} from \"../custom-hooks\";\r\n\r\nexport interface InfiniteScrollProps {\r\n    children: ReactNode;\r\n    hasMore: boolean;\r\n    loadMore: () => void;\r\n    loader?: React.ReactNode | JSX.Element | string;\r\n    attributes?: React.HTMLAttributes<HTMLDivElement>;\r\n}\r\n\r\n/**\r\n * InfiniteScroll component\r\n *\r\n * @param children\r\n * @param hasMore\r\n * @param loadMore\r\n * @param loader\r\n * @param attributes\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst InfiniteScroll: React.FC<InfiniteScrollProps> = ({children, hasMore, loadMore, loader, attributes}: InfiniteScrollProps): JSX.Element => {\r\n    const [loading, setLoading] = React.useState(false);\r\n    React.useEffect(() => setLoading(false), [children, setLoading]);\r\n\r\n    const lastElementRef = React.useRef(null);\r\n    const isBottomVisible = useIntersectionObserver(lastElementRef, {threshold: 0}, false);\r\n\r\n    React.useEffect(() => {\r\n        if (isBottomVisible && hasMore && !loading) {\r\n            loadMore();\r\n            setLoading(true);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [isBottomVisible, hasMore]);\r\n\r\n    return (\r\n        <div data-test=\"component-infinite-scroll\" {...attributes}>\r\n            {children}\r\n            {loading && !!loader ? <div data-test=\"element-loader\">{loader}</div> : null}\r\n            <div ref={lastElementRef} style={{height: \"1px\", marginTop: \"-1px\"}} data-test=\"element-last\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InfiniteScroll;\r\n","import React from \"react\";\r\nimport {PhotoItem} from \"../types\";\r\nimport {isPhotoLiked, likePhoto} from \"../services\";\r\nimport {useIntersectionObserver} from \"../custom-hooks\";\r\nimport \"./gallery-image.scss\";\r\n\r\n\r\nconst IMG_URL: string = process.env.REACT_APP_IMG_URL as string;\r\n\r\nexport interface GalleryImageProps {\r\n    photo: PhotoItem;\r\n}\r\n\r\n/**\r\n * GalleryImage component\r\n *\r\n * @param photo\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst GalleryImage: React.FC<GalleryImageProps> = ({photo}: GalleryImageProps): JSX.Element => {\r\n    const ref = React.useRef(null);\r\n    const isVisible = useIntersectionObserver(ref, {threshold: 0}, false);\r\n\r\n    const [isLiked, setIsLiked] = React.useState(isPhotoLiked(photo));\r\n    const [showImage, setShowImage] = React.useState(isVisible);\r\n\r\n    React.useEffect(() => {\r\n        if (isVisible) {\r\n            setShowImage(true);\r\n        }\r\n    }, [isVisible, setShowImage]);\r\n\r\n    const onPhotoBtnLikeClick: () => void = () => {\r\n        setIsLiked(!isLiked);\r\n        likePhoto(photo);\r\n    };\r\n\r\n    return (\r\n        <div ref={ref} className=\"gallery-img-wrapper\" data-test=\"component-gallery-image\">\r\n            {showImage ? <img src={`${IMG_URL}/${photo.id}/300`} alt={photo.author} className=\"gallery-img\"\r\n                              data-test=\"element-img\"/> : null}\r\n            <div className=\"gallery-img-overlay\">\r\n                <div className=\"gallery-img-overlay-content\">\r\n                    <div className=\"photo-name\" data-test=\"element-photo-name\">{photo.author}</div>\r\n                    <div className=\"photo-author\" data-test=\"element-photo-author\">{photo.author}</div>\r\n                    <button className={\"photo-like-button\" + (isLiked ? \" liked\" : \"\")}\r\n                            onClick={onPhotoBtnLikeClick} data-test=\"button-like\">Favourite\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GalleryImage;\r\n","import React from \"react\";\r\nimport \"./loader.scss\";\r\n\r\n/**\r\n * Loader component\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Loader: React.FC = (): JSX.Element => {\r\n    return (\r\n        <div data-test=\"component-loader\">\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport {APPEND_PHOTOS, usePhotos} from \"../contexts/photos-context\";\r\nimport {fetchPhotos} from \"../services\";\r\nimport CONFIG from \"../config\";\r\nimport {PhotoItem} from \"../types\";\r\nimport InfiniteScroll from \"../components/infinite-scroll\";\r\nimport GalleryImage from \"../components/gallery-image\";\r\nimport Loader from \"../components/loader\";\r\nimport \"./gallery.scss\";\r\nimport {toast} from \"react-toastify\";\r\n\r\nconst PAGE_SIZE: number = CONFIG.PAGE_SIZE as number;\r\n\r\n/**\r\n * Gallery component\r\n *\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Gallery: React.FC = (): JSX.Element => {\r\n    const [photos, setPhotos] = usePhotos();\r\n    const [page, setPage] = React.useState(1);\r\n    const [hasMore, setHasMore] = React.useState(photos.length === PAGE_SIZE);\r\n\r\n    React.useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const response = await fetchPhotos(page, PAGE_SIZE);\r\n                const newPhotos: PhotoItem[] = await response.json();\r\n                setPhotos({type: APPEND_PHOTOS, payload: newPhotos});\r\n                setHasMore(newPhotos.length === PAGE_SIZE);\r\n            } catch (e) {\r\n                toast.error(e.toString(), {\r\n                    position: \"bottom-right\"\r\n                });\r\n            }\r\n        })();\r\n    }, [page, setPhotos, setHasMore]);\r\n\r\n    const loadMoreFn = React.useCallback(() => {\r\n        setPage(page + 1);\r\n    }, [page]);\r\n\r\n    const loader: JSX.Element = <Loader/>;\r\n\r\n    return (\r\n        <InfiniteScroll hasMore={hasMore} loadMore={loadMoreFn} loader={loader}\r\n                        data-test=\"element-infinite-scroll\">\r\n            <div className=\"gallery-grid\">\r\n                {\r\n                    photos.map((photo: PhotoItem) => (\r\n                        <GalleryImage photo={photo} key={photo.id} data-test=\"element-gallery-image\"/>\r\n                    ))\r\n                }\r\n            </div>\r\n        </InfiniteScroll>\r\n    );\r\n};\r\n\r\nexport default Gallery;\r\n","import React from \"react\";\nimport {ToastContainer} from \"react-toastify\";\nimport {PhotosProvider} from \"./contexts/photos-context\";\nimport Gallery from \"./pages/gallery\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n/**\n * App component\n *\n * @constructor\n *\n * @return {JSX.Element}\n */\nconst App: React.FC = (): JSX.Element => {\n    return (\n        <div data-test=\"component-app\">\n            <PhotosProvider>\n                <Gallery data-test=\"element-gallery\"/>\n            </PhotosProvider>\n            <ToastContainer data-test=\"element-toast-container\"/>\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}